name: Deploy Crypto Web

on:
  push:
    branches:
      - main

jobs:
  prepare:
    name: Prepare release directory
    runs-on: [self-hosted]
    outputs:
      release: ${{ steps.set-release.outputs.release }}
    steps:
      - name: Generate and output release dir
        id: set-release
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          echo "release=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Generated timestamp: $TIMESTAMP"
          mkdir -p "${{ secrets.DEPLOY_PATH }}/releases/$TIMESTAMP"

      - name: Clone repo
        run: |
          git clone --depth=1 --branch main https://github.com/${{ github.repository }} "${{ secrets.DEPLOY_PATH }}/releases/${{ steps.set-release.outputs.release }}"

      - name: Remove storage directory
        run: |
          rm -rf "${{ secrets.DEPLOY_PATH }}/releases/${{ steps.set-release.outputs.release }}/storage"

      - name: Link shared files
        run: |
          ln -snf "${{ secrets.DEPLOY_PATH }}/shared/.env" "${{ secrets.DEPLOY_PATH }}/releases/${{ steps.set-release.outputs.release }}/.env"
          ln -snf "${{ secrets.DEPLOY_PATH }}/shared/storage" "${{ secrets.DEPLOY_PATH }}/releases/${{ steps.set-release.outputs.release }}/storage"

  composer:
    name: Install Composer dependencies
    needs: prepare
    runs-on: [self-hosted]
    steps:
      - name: Composer install
        run: |
          # Debug the outputs from prepare job
          echo "Prepare job release output: '${{ needs.prepare.outputs.release }}'"
          
          # Check if the release value is empty and find the most recent release directory if needed
          if [ -z "${{ needs.prepare.outputs.release }}" ]; then
            echo "WARNING: Release variable is empty, finding most recent release directory..."
            RELEASE_DIR=$(ls -1t "${{ secrets.DEPLOY_PATH }}/releases/" | grep -E '^[0-9]{14}$' | head -n 1)
            echo "Found most recent release directory: $RELEASE_DIR"
          else
            RELEASE_DIR="${{ needs.prepare.outputs.release }}"
            echo "Using provided release directory: $RELEASE_DIR"
          fi
          
          # Set the full release path
          RELEASE_PATH="${{ secrets.DEPLOY_PATH }}/releases/$RELEASE_DIR"
          echo "Full release path: $RELEASE_PATH"
          
          # Check if the directory exists
          if [ ! -d "$RELEASE_PATH" ]; then
            echo "ERROR: Release directory does not exist: $RELEASE_PATH"
            ls -la "${{ secrets.DEPLOY_PATH }}/releases/"
            exit 1
          fi
          
          # Change to release directory
          cd "$RELEASE_PATH"
          echo "Current directory: $(pwd)"
          
          # Run composer
          composer install --no-dev --optimize-autoloader

  npm:
    name: Build frontend assets
    needs: composer
    runs-on: [self-hosted]
    steps:
      - name: Debug release path
        run: |
          echo "Release path: ${{ secrets.DEPLOY_PATH }}/releases/${{ needs.prepare.outputs.release }}"
          ls -la "${{ secrets.DEPLOY_PATH }}/releases/${{ needs.prepare.outputs.release }}"

      - name: NPM build
        run: |
          # Debug the outputs from prepare job
          echo "Prepare job release output: '${{ needs.prepare.outputs.release }}'"
          
          # Check if the release value is empty and find the most recent release directory if needed
          if [ -z "${{ needs.prepare.outputs.release }}" ]; then
            echo "WARNING: Release variable is empty, finding most recent release directory..."
            RELEASE_DIR=$(ls -1t "${{ secrets.DEPLOY_PATH }}/releases/" | grep -E '^[0-9]{14}$' | head -n 1)
            echo "Found most recent release directory: $RELEASE_DIR"
          else
            RELEASE_DIR="${{ needs.prepare.outputs.release }}"
            echo "Using provided release directory: $RELEASE_DIR"
          fi
          
          # Set the full release path
          RELEASE_PATH="${{ secrets.DEPLOY_PATH }}/releases/$RELEASE_DIR"
          echo "Full release path: $RELEASE_PATH"
          
          # Check if the directory exists
          if [ ! -d "$RELEASE_PATH" ]; then
            echo "ERROR: Release directory does not exist: $RELEASE_PATH"
            ls -la "${{ secrets.DEPLOY_PATH }}/releases/"
            exit 1
          fi
          
          # Verify package.json exists
          if [ ! -f "$RELEASE_PATH/package.json" ]; then
            echo "ERROR: package.json not found in $RELEASE_PATH"
            ls -la "$RELEASE_PATH"
            exit 1
          fi
          
          # Change to release directory
          cd "$RELEASE_PATH"
          echo "Current directory: $(pwd)"
          
          # Run npm commands
          /usr/bin/npm install
          /usr/bin/npm run build-only
          rm -rf node_modules

  migrate:
    name: Run migrations and seed
    needs: npm
    runs-on: [self-hosted]
    steps:
      - name: Artisan migrate
        run: |
          # Debug the outputs from prepare job
          echo "Prepare job release output: '${{ needs.prepare.outputs.release }}'"
          
          # Check if the release value is empty and find the most recent release directory if needed
          if [ -z "${{ needs.prepare.outputs.release }}" ]; then
            echo "WARNING: Release variable is empty, finding most recent release directory..."
            RELEASE_DIR=$(ls -1t "${{ secrets.DEPLOY_PATH }}/releases/" | grep -E '^[0-9]{14}$' | head -n 1)
            echo "Found most recent release directory: $RELEASE_DIR"
          else
            RELEASE_DIR="${{ needs.prepare.outputs.release }}"
            echo "Using provided release directory: $RELEASE_DIR"
          fi
          
          # Set the full release path
          RELEASE_PATH="${{ secrets.DEPLOY_PATH }}/releases/$RELEASE_DIR"
          echo "Full release path: $RELEASE_PATH"
          
          # Check if the directory exists
          if [ ! -d "$RELEASE_PATH" ]; then
            echo "ERROR: Release directory does not exist: $RELEASE_PATH"
            ls -la "${{ secrets.DEPLOY_PATH }}/releases/"
            exit 1
          fi
          
          # Change to release directory
          cd "$RELEASE_PATH"
          echo "Current directory: $(pwd)"
          
          # Run migrations
          php artisan migrate --seed --force

  activate:
    name: Activate release & restart FPM
    needs: migrate
    runs-on: [self-hosted]
    steps:
      - name: Switch symlink and restart PHP
        run: |
          # Debug the outputs from prepare job
          echo "Prepare job release output: '${{ needs.prepare.outputs.release }}'"
          
          # Check if the release value is empty and find the most recent release directory if needed
          if [ -z "${{ needs.prepare.outputs.release }}" ]; then
            echo "WARNING: Release variable is empty, finding most recent release directory..."
            RELEASE_DIR=$(ls -1t "${{ secrets.DEPLOY_PATH }}/releases/" | grep -E '^[0-9]{14}$' | head -n 1)
            echo "Found most recent release directory: $RELEASE_DIR"
          else
            RELEASE_DIR="${{ needs.prepare.outputs.release }}"
            echo "Using provided release directory: $RELEASE_DIR"
          fi
          
          # Set the full release path
          RELEASE_PATH="${{ secrets.DEPLOY_PATH }}/releases/$RELEASE_DIR"
          echo "Full release path: $RELEASE_PATH"
          
          # Check if the directory exists
          if [ ! -d "$RELEASE_PATH" ]; then
            echo "ERROR: Release directory does not exist: $RELEASE_PATH"
            ls -la "${{ secrets.DEPLOY_PATH }}/releases/"
            exit 1
          fi
          
          # Switch symlink and restart PHP
          ln -sfn "$RELEASE_PATH" "${{ secrets.DEPLOY_PATH }}/current"
          /usr/bin/systemctl restart php8.3-fpm

  cleanup:
    name: Cleanup old releases
    needs: activate
    runs-on: [self-hosted]
    steps:
      - name: Purge old releases (keep 3)
        run: |
          cd "${{ secrets.DEPLOY_PATH }}/releases"
          ls -1t | tail -n +4 | xargs -r rm -rf